!function(e,o){"object"==typeof exports&&"object"==typeof module?module.exports=o():"function"==typeof define&&define.amd?define("AssetLoader",[],o):"object"==typeof exports?exports.AssetLoader=o():e.AssetLoader=o()}(this,function(){return function(e){function o(a){if(s[a])return s[a].exports;var t=s[a]={i:a,l:!1,exports:{}};return e[a].call(t.exports,t,t.exports,o),t.l=!0,t.exports}var s={};return o.m=e,o.c=s,o.d=function(e,s,a){o.o(e,s)||Object.defineProperty(e,s,{configurable:!1,enumerable:!0,get:a})},o.n=function(e){var s=e&&e.__esModule?function(){return e.default}:function(){return e};return o.d(s,"a",s),s},o.o=function(e,o){return Object.prototype.hasOwnProperty.call(e,o)},o.p="",o(o.s=0)}([function(e,o,s){"use strict";function a(e,o){if(!(e instanceof o))throw new TypeError("Cannot call a class as a function")}Object.defineProperty(o,"__esModule",{value:!0});var t=function(){function e(e,o){for(var s=0;s<o.length;s++){var a=o[s];a.enumerable=a.enumerable||!1,a.configurable=!0,"value"in a&&(a.writable=!0),Object.defineProperty(e,a.key,a)}}return function(o,s,a){return s&&e(o.prototype,s),a&&e(o,a),o}}(),r=function(){function e(o,s){a(this,e),this.game=o,s.hasOwnProperty("baseURL")&&this.loadBaseURL(s.baseURL),s.hasOwnProperty("crossOrigin")&&this.loadCrossOrigin(s.crossOrigin),s.hasOwnProperty("enableParallel")&&this.loadEnableParallel(s.enableParallel),s.hasOwnProperty("path")&&this.loadPath(s.path),s.hasOwnProperty("resetLocked")&&this.loadResetLocked(s.resetLocked),s.hasOwnProperty("atlas")&&this.loadAtlas(s.atlas),s.hasOwnProperty("atlasJSONArray")&&this.loadAtlasJSONArray(s.atlasJSONArray),s.hasOwnProperty("atlasJSONHash")&&this.loadAtlasJSONHash(s.atlasJSONHash),s.hasOwnProperty("atlasXML")&&this.loadAtlasXML(s.atlasXML),s.hasOwnProperty("audio")&&this.loadAudio(s.audio),s.hasOwnProperty("audioSprite")&&this.loadAudioSprite(s.audioSprite),s.hasOwnProperty("binary")&&this.loadBinary(s.binary),s.hasOwnProperty("bitmapFont")&&this.loadBitmapFont(s.bitmapFont),s.hasOwnProperty("image")&&this.loadImage(s.image),s.hasOwnProperty("images")&&this.loadImages(s.images),s.hasOwnProperty("json")&&this.loadJSON(s.json),s.hasOwnProperty("pack")&&this.loadPack(s.pack),s.hasOwnProperty("physics")&&this.loadPhysics(s.physics),s.hasOwnProperty("script")&&this.loadScript(s.script),s.hasOwnProperty("shader")&&this.loadShader(s.shader),s.hasOwnProperty("spritesheet")&&this.loadSpritesheet(s.spritesheet),s.hasOwnProperty("text")&&this.loadText(s.text),s.hasOwnProperty("tilemap")&&this.loadTilemap(s.tilemap),s.hasOwnProperty("video")&&this.loadVideo(s.video),s.hasOwnProperty("xml")&&this.loadXML(s.xml)}return t(e,[{key:"loadBaseURL",value:function(e){"string"==typeof e&&""!==e&&(this.game.load.baseURL=e)}},{key:"loadCrossOrigin",value:function(e){("string"==typeof e&&""!==e||"boolean"==typeof e)&&(this.game.load.crossOrigin=e)}},{key:"loadEnableParallel",value:function(e){"boolean"==typeof e&&(this.game.load.enableParallel=e)}},{key:"loadPath",value:function(e){"string"==typeof e&&""!==e&&(this.game.load.path=e)}},{key:"loadResetLocked",value:function(e){"boolean"==typeof e&&(this.game.load.resetLocked=e)}},{key:"loadAtlas",value:function(o){var s=void 0,a=void 0,t=void 0,r=void 0,l=void 0,i=void 0,n=void 0;if("string"==typeof o)this.game.load.atlas(o);else if(Array.isArray(o))for(t=0;t<o.length;t++)"string"==typeof o[t]?this.game.load.atlas(o[t]):console.log("AssetLoader:: atlas keys must be of type 'string'.");else if(e.isHashMap(o))for(s in o)a=o[s],e.isHashMap(a)?(r=a.hasOwnProperty("textureURL")?a.textureURL:s+".png",r&&"string"==typeof r?(l=a.hasOwnProperty("atlasURL")?a.atlasURL:s+".json","string"==typeof l?(i=a.hasOwnProperty("atlasData")?a.atlasData:null,null===i||e.isHashMap(i)?(n=a.hasOwnProperty("format")?a.format:Phaser.Loader.TEXTURE_ATLAS_JSON_ARRAY,n===Phaser.Loader.TEXTURE_ATLAS_JSON_ARRAY||n===Phaser.Loader.TEXTURE_ATLAS_JSON_HASH||n===Phaser.Loader.TEXTURE_ATLAS_XML_STARLING?this.game.load.atlas(s,r,l,i,n):console.log("AssetLoader:: (key: "+s+") atlas 'format' must be Phaser.Loader.TEXTURE_ATLAS_JSON_ARRAY (0) or Phaser.Loader.TEXTURE_ATLAS_JSON_HASH (1) or Phaser.Loader.TEXTURE_ATLAS_XML_STARLING (2).")):console.log("AssetLoader:: (key: "+s+") atlas 'atlasData' must be a json object.")):console.log("AssetLoader:: (key: "+s+") atlas 'atlasURL' must be of type 'string'.")):console.log("AssetLoader:: (key: "+s+") atlas 'textureURL' must be of type 'string'.")):console.log("AssetLoader:: (key: "+s+") atlas json structure is malformed.");else console.log("AssetLoader:: 'atlas' json structure is malformed.")}},{key:"loadAtlasJSONArray",value:function(o){var s=void 0,a=void 0,t=void 0,r=void 0,l=void 0,i=void 0;if("string"==typeof o)this.game.load.atlasJSONArray(o);else if(Array.isArray(o))for(t=0;t<o.length;t++)"string"==typeof o[t]?this.game.load.atlasJSONArray(o[t]):console.log("AssetLoader:: atlasJSONArray keys must be of type 'string'.");else if(e.isHashMap(o))for(s in o)a=o[s],e.isHashMap(a)?(r=a.hasOwnProperty("textureURL")?a.textureURL:s+".png",r&&"string"==typeof r?(l=a.hasOwnProperty("atlasURL")?a.atlasURL:s+".json","string"==typeof l?(i=a.hasOwnProperty("atlasData")?a.atlasData:null,null===i||e.isHashMap(i)?this.game.load.atlasJSONArray(s,r,l,i):console.log("AssetLoader:: (key: "+s+") atlasJSONArray 'atlasData' must be a json object.")):console.log("AssetLoader:: (key: "+s+") atlasJSONArray 'atlasURL' must be of type 'string'.")):console.log("AssetLoader:: (key: "+s+") atlasJSONArray 'textureURL' must be of type 'string'.")):console.log("AssetLoader:: (key: "+s+") atlasJSONArray json structure is malformed.");else console.log("AssetLoader:: 'atlasJSONArray' json structure is malformed.")}},{key:"loadAtlasJSONHash",value:function(o){var s=void 0,a=void 0,t=void 0,r=void 0,l=void 0,i=void 0;if("string"==typeof o)this.game.load.atlasJSONHash(o);else if(Array.isArray(o))for(t=0;t<o.length;t++)"string"==typeof o[t]?this.game.load.atlasJSONHash(o[t]):console.log("AssetLoader:: atlasJSONHash keys must be of type 'string'.");else if(e.isHashMap(o))for(s in o)a=o[s],e.isHashMap(a)?(r=a.hasOwnProperty("textureURL")?a.textureURL:s+".png",r&&"string"==typeof r?(l=a.hasOwnProperty("atlasURL")?a.atlasURL:s+".json","string"==typeof l?(i=a.hasOwnProperty("atlasData")?a.atlasData:null,null===i||e.isHashMap(i)?this.game.load.atlasJSONHash(s,r,l,i):console.log("AssetLoader:: (key: "+s+") atlasJSONHash 'atlasData' must be a json object.")):console.log("AssetLoader:: (key: "+s+") atlasJSONHash 'atlasURL' must be of type 'string'.")):console.log("AssetLoader:: (key: "+s+") atlasJSONHash 'textureURL' must be of type 'string'.")):console.log("AssetLoader:: (key: "+s+") atlasJSONHash json structure is malformed.");else console.log("AssetLoader:: 'atlasJSONHash' json structure is malformed.")}},{key:"loadAtlasXML",value:function(o){var s=void 0,a=void 0,t=void 0,r=void 0,l=void 0,i=void 0;if("string"==typeof o)this.game.load.atlasXML(o);else if(Array.isArray(o))for(t=0;t<o.length;t++)"string"==typeof o[t]?this.game.load.atlasXML(o[t]):console.log("AssetLoader:: atlasXML keys must be of type 'string'.");else if(e.isHashMap(o))for(s in o)a=o[s],e.isHashMap(a)?(r=a.hasOwnProperty("textureURL")?a.textureURL:s+".png",r&&"string"==typeof r?(l=a.hasOwnProperty("atlasURL")?a.atlasURL:s+".xml","string"==typeof l?(i=a.hasOwnProperty("atlasData")?a.atlasData:null,null===i||e.isHashMap(i)?this.game.load.atlasXML(s,r,l,i):console.log("AssetLoader:: (key: "+s+") atlasXML 'atlasData' must be a json object.")):console.log("AssetLoader:: (key: "+s+") atlasXML 'atlasURL' must be of type 'string'.")):console.log("AssetLoader:: (key: "+s+") atlasXML 'textureURL' must be of type 'string'.")):console.log("AssetLoader:: (key: "+s+") atlasXML json structure is malformed.");else console.log("AssetLoader:: 'atlasXML' json structure is malformed.")}},{key:"loadAudio",value:function(o){var s=void 0,a=void 0,t=void 0,r=void 0;if(e.isHashMap(o))for(s in o)a=o[s],"string"==typeof a&&""!==a||Array.isArray(a)&&a.length>0?this.game.load.audio(s,a):e.isHashMap(a)&&Object.keys(a).length>0?(t=a.hasOwnProperty("urls")?a.urls:null,"string"==typeof t&&""!==t||Array.isArray(t)&&t.length>0?(r=!a.hasOwnProperty("autoDecode")||a.autoDecode,"boolean"==typeof r?this.game.load.audio(s,t,r):console.log("AssetLoader:: (key: "+s+") audio 'autoDecode' must be of type 'boolean'.")):console.log("AssetLoader:: (key: "+s+") audio must have 'urls' defined and be of type 'string' or Array.")):console.log("AssetLoader:: 'audio' json structure is malformed.");else console.log("AssetLoader:: 'audio' json structure is malformed.")}},{key:"loadAudioSprite",value:function(o){var s=void 0,a=void 0,t=void 0,r=void 0,l=void 0,i=void 0;if(e.isHashMap(o))for(s in o)a=o[s],e.isHashMap(a)&&Object.keys(a).length>0?(t=a.hasOwnProperty("urls")?a.urls:null,"string"==typeof t&&""!==t||Array.isArray(t)&&t.length>0?(r=a.hasOwnProperty("jsonURL")?a.jsonURL:null,null!==r&&"string"!=typeof r?console.log("AssetLoader:: (key: "+s+") audioSprite 'jsonURL' must be of type 'string'."):(l=a.hasOwnProperty("jsonData")?a.jsonData:null,null===l||e.isHashMap(l)?null!==r||null!==l?(i=!a.hasOwnProperty("autoDecode")||a.autoDecode,"boolean"==typeof i?this.game.load.audioSprite(s,t,r,l,i):console.log("AssetLoader:: (key: "+s+") audioSprite 'autoDecode' must be of type 'boolean'.")):console.log("AssetLoader:: (key: "+s+") audioSprite must have 'jsonURL' or 'jsonData' defined."):console.log("AssetLoader:: (key: "+s+") audioSprite 'jsonData' must be a json object."))):console.log("AssetLoader:: (key: "+s+") audioSprite must have 'urls' defined and be of type 'string' or Array.")):console.log("AssetLoader:: 'audioSprite' json structure is malformed.");else console.log("AssetLoader:: 'audioSprite' json structure is malformed.")}},{key:"loadBinary",value:function(o){var s=void 0,a=void 0,t=void 0,r=void 0;if("string"==typeof o)this.game.load.binary(o);else if(Array.isArray(o))for(t=0;t<o.length;t++)"string"==typeof o[t]?this.game.load.binary(o[t]):console.log("AssetLoader:: binary keys must be of type 'string'.");else if(e.isHashMap(o))for(s in o)a=o[s],"string"==typeof a&&""!==a?this.game.load.binary(s,a):e.isHashMap(a)?(r=a.hasOwnProperty("url")?a.url:s+".bin","string"==typeof r?this.game.load.binary(s,r):console.log("AssetLoader:: (key: "+s+") binary must have a 'url' of type 'string' defined.")):console.log("AssetLoader:: 'binary' json structure is malformed.");else console.log("AssetLoader:: 'binary' json structure is malformed.")}},{key:"loadBitmapFont",value:function(o){var s=void 0,a=void 0,t=void 0,r=void 0,l=void 0,i=void 0,n=void 0,d=void 0;if("string"==typeof o)this.game.load.bitmapFont(o);else if(Array.isArray(o))for(t=0;t<o.length;t++)"string"==typeof o[t]?this.game.load.bitmapFont(o[t]):console.log("AssetLoader:: bitmapFont keys must be of type 'string'.");else if(e.isHashMap(o))for(s in o)a=o[s],e.isHashMap(a)?(r=a.hasOwnProperty("textureURL")?a.textureURL:s+".png",r&&"string"==typeof r?(l=a.hasOwnProperty("atlasURL")?a.atlasURL:s+".xml","string"==typeof l?(i=a.hasOwnProperty("atlasData")?a.atlasData:null,null===i||e.isHashMap(i)?(n=a.hasOwnProperty("xSpacing")?a.xSpacing:0,d=a.hasOwnProperty("ySpacing")?a.ySpacing:0,"number"==typeof n&&"number"==typeof d?this.game.load.bitmapFont(s,r,l,i,n,d):console.log("AssetLoader:: (key: "+s+") bitmapFont 'xSpacing' and 'ySpacing' must be of type 'number'.")):console.log("AssetLoader:: (key: "+s+") bitmapFont 'atlasData' must be a json object.")):console.log("AssetLoader:: (key: "+s+") bitmapFont must have 'atlasURL' or 'atlasData' defined.")):console.log("AssetLoader:: (key: "+s+") bitmapFont must have a 'textureURL' defined.")):console.log("AssetLoader:: 'bitmapFont' json structure is malformed.");else console.log("AssetLoader:: 'bitmapFont' json structure is malformed.")}},{key:"loadImage",value:function(o){var s=void 0,a=void 0,t=void 0,r=void 0,l=void 0;if("string"==typeof o)this.game.load.image(o);else if(Array.isArray(o))for(t=0;t<o.length;t++)"string"==typeof o[t]?this.game.load.image(o[t]):console.log("AssetLoader:: image keys must be of type 'string'.");else if(e.isHashMap(o))for(s in o)a=o[s],"string"==typeof a?this.game.load.image(s,a):e.isHashMap(a)?(r=a.hasOwnProperty("url")?a.url:s+".png","string"==typeof r?(l=!!a.hasOwnProperty("overwrite")&&a.overwrite,"boolean"==typeof l?this.game.load.image(s,r,l):console.log("AssetLoader:: (key: "+s+") image 'overwrite' must be of type 'boolean'.")):console.log("AssetLoader:: (key: "+s+") image 'url' must be of type 'string'.")):console.log("AssetLoader:: 'image' json structure is malformed.");else console.log("AssetLoader:: 'image' json structure is malformed.")}},{key:"loadImages",value:function(o){var s=void 0,a=void 0;Array.isArray(o)?this.game.load.images(o):e.isHashMap(o)?(s=o.hasOwnProperty("keys")?o.keys:null,null!==s&&Array.isArray(s)&&s.length>0?(a=o.hasOwnProperty("urls")?o.urls:null,null!==a&&(!Array.isArray(a)||a.length<1)?console.log("AssetLoader:: images 'urls' must be of type 'Array' and must not be empty."):this.game.load.images(s,a)):console.log("AssetLoader:: images must have 'keys' defined of type 'Array' and must not be empty.")):console.log("AssetLoader:: 'images' json structure is malformed.")}},{key:"loadJSON",value:function(o){var s=void 0,a=void 0,t=void 0,r=void 0,l=void 0;if("string"==typeof o)this.game.load.json(o);else if(Array.isArray(o))for(t=0;t<o.length;t++)"string"==typeof o[t]?this.game.load.json(o[t]):console.log("AssetLoader:: 'json' keys must be of type 'string'.");else if(e.isHashMap(o))for(s in o)a=o[s],"string"==typeof a?this.game.load.json(s,a):e.isHashMap(a)?(r=a.hasOwnProperty("url")?a.url:s+".json","string"==typeof r?(l=!!a.hasOwnProperty("overwrite")&&a.overwrite,"boolean"==typeof l?this.game.load.json(s,r,l):console.log("AssetLoader:: (key: "+s+") json 'overwrite' must be of type 'boolean'.")):console.log("AssetLoader:: (key: "+s+") json 'url' must be of type 'string'.")):console.log("AssetLoader:: 'json' json structure is malformed.");else console.log("AssetLoader:: 'json' json structure is malformed.")}},{key:"loadPack",value:function(o){var s=void 0,a=void 0;if(e.isHashMap(o))for(s in o)a=o[s],"string"==typeof a?this.game.load.pack(s,a):e.isHashMap(a)?this.game.load.pack(s,null,a):console.log("AssetLoader:: 'pack' json structure is malformed.");else console.log("AssetLoader:: 'pack' json structure is malformed.")}},{key:"loadPhysics",value:function(o){var s=void 0,a=void 0,t=void 0,r=void 0,l=void 0,i=void 0;if("string"==typeof o)this.game.load.physics(o);else if(Array.isArray(o))for(a=0;a<o.length;a++)"string"==typeof o[a]?this.game.load.physics(o[a]):console.log("AssetLoader:: physics keys must be of type 'string'.");else if(e.isHashMap(o))for(s in o)t=o[s],"string"==typeof t?this.game.load.physics(s,t):e.isHashMap(t)?(r=t.hasOwnProperty("url")?t.url:s+".json","string"==typeof r?(l=t.hasOwnProperty("data")?t.data:null,null===l||e.isHashMap(l)?(i=t.hasOwnProperty("format")?t.format:Phaser.Loader.PHYSICS_LIME_CORONA_JSON,i===Phaser.Loader.PHYSICS_LIME_CORONA_JSON||i===Phaser.Loader.PHYSICS_PHASER_JSON?this.game.load.physics(s,r,l,i):console.log("AssetLoader:: (key: "+s+") physics 'format' must be Phaser.Loader.PHYSICS_LIME_CORONA_JSON (3) or Phaser.Loader.PHYSICS_PHASER_JSON (4).")):console.log("AssetLoader:: (key: "+s+") physics 'data' must be of type 'object'.")):console.log("AssetLoader:: (key: "+s+") physics 'url' must be of type 'string'.")):console.log("AssetLoader:: 'physics' json structure is malformed.");else console.log("AssetLoader:: 'physics' json structure is malformed.")}},{key:"loadScript",value:function(o){var s=void 0,a=void 0,t=void 0,r=void 0;if("string"==typeof o)this.game.load.script(o);else if(Array.isArray(o))for(a=0;a<o.length;a++)"string"==typeof o[a]?this.game.load.script(o[a]):console.log("AssetLoader:: script keys must be of type 'string'.");else if(e.isHashMap(o))for(s in o)t=o[s],"string"==typeof t?this.game.load.script(s,t):e.isHashMap(t)?(r=t.hasOwnProperty("url")?t.url:s+".js","string"==typeof r?this.game.load.script(s,r):console.log("AssetLoader:: (key: "+s+") script 'url' must be of type 'string'.")):console.log("AssetLoader:: 'script' json structure is malformed.");else console.log("AssetLoader:: 'script' json structure is malformed.")}},{key:"loadShader",value:function(o){var s=void 0,a=void 0,t=void 0,r=void 0,l=void 0;if("string"==typeof o)this.game.load.shader(o);else if(Array.isArray(o))for(t=0;t<o.length;t++)"string"==typeof o[t]?this.game.load.shader(o[t]):console.log("AssetLoader:: shader keys must be of type 'string'.");else if(e.isHashMap(o))for(s in o)a=o[s],"string"==typeof a?this.game.load.shader(s,a):e.isHashMap(a)?(r=a.hasOwnProperty("url")?a.url:s+".frag","string"==typeof r?(l=!!a.hasOwnProperty("overwrite")&&a.overwrite,"boolean"==typeof l?this.game.load.shader(s,r,l):console.log("AssetLoader:: (key: "+s+") shader 'overwrite' must be of type 'boolean'.")):console.log("AssetLoader:: (key: "+s+") shader 'url' must be of type 'string'.")):console.log("AssetLoader:: 'shader' json structure is malformed.");else console.log("AssetLoader:: 'shader' json structure is malformed.")}},{key:"loadSpritesheet",value:function(o){var s=void 0,a=void 0,t=void 0,r=void 0,l=void 0,i=void 0,n=void 0,d=void 0;if(e.isHashMap(o))for(s in o)a=o[s],t=a.hasOwnProperty("url")?a.url:null,"string"==typeof t?(r=a.hasOwnProperty("frameWidth")?a.frameWidth:null,"number"==typeof r?(l=a.hasOwnProperty("frameHeight")?a.frameHeight:null,"number"==typeof l?(i=a.hasOwnProperty("frameMax")?a.frameMax:-1,n=a.hasOwnProperty("margin")?a.margin:0,d=a.hasOwnProperty("spacing")?a.spacing:0,"number"==typeof i&&"number"==typeof n&&"number"==typeof d?this.game.load.spritesheet(s,t,r,l,i,n,d):console.log("AssetLoader:: (key: "+s+") spritesheet 'frameMax', 'margin', and 'spacing' must be of type 'number'")):console.log("AssetLoader:: (key: "+s+") spritesheets must have a 'frameHeight' defined and be of type 'number'")):console.log("AssetLoader:: (key: "+s+") spritesheets must have a 'frameWidth' defined and be of type 'number'")):console.log("AssetLoader:: (key: "+s+") spritesheets must have a 'url' defined and of type 'string'");else console.log("AssetLoader:: 'spritesheet' json structure is malformed.")}},{key:"loadText",value:function(o){var s=void 0,a=void 0,t=void 0,r=void 0,l=void 0;if("string"==typeof o)this.game.load.text(o);else if(Array.isArray(o))for(t=0;t<o.length;t++)"string"==typeof o[t]?this.game.load.text(o[t]):console.log("AssetLoader:: text keys must be of type 'string'.");else if(e.isHashMap(o))for(s in o)a=o[s],"string"==typeof a?this.game.load.text(s,a):e.isHashMap(a)?(r=a.hasOwnProperty("url")?a.url:s+".txt","string"==typeof r?(l=!!a.hasOwnProperty("overwrite")&&a.overwrite,"boolean"==typeof l?this.game.load.text(s,r,l):console.log("AssetLoader:: (key: "+s+") text 'overwrite' must be of type 'boolean'.")):console.log("AssetLoader:: (key: "+s+") text 'url' must be of type 'string'.")):console.log("AssetLoader:: 'text' json structure is malformed.");else console.log("AssetLoader:: 'text' json structure is malformed.")}},{key:"loadTilemap",value:function(o){var s=void 0,a=void 0,t=void 0,r=void 0,l=void 0,i=void 0;if("string"==typeof o)this.game.load.tilemap(o);else if(Array.isArray(o))for(a=0;a<o.length;a++)"string"==typeof o[a]?this.game.load.tilemap(o[a]):console.log("AssetLoader:: tilemap keys must be of type 'string'.");else if(e.isHashMap(o))for(s in o)t=o[s],"string"==typeof t?this.game.load.tilemap(s,t):e.isHashMap(t)?(r=t.hasOwnProperty("url")?t.url:s+".csv","string"==typeof r?(l=t.hasOwnProperty("data")?t.data:null,null===l||e.isHashMap(l)?(i=t.hasOwnProperty("format")?t.format:Phaser.Tilemap.CSV,i===Phaser.Tilemap.CSV||i===Phaser.Tilemap.TILED_JSON?this.game.load.tilemap(s,r,l,i):console.log("AssetLoader:: (key: "+s+") tilemap 'format' must be Phaser.Tilemap.CSV (0) or Phaser.Tilemap.TILED_JSON (1).")):console.log("AssetLoader:: (key: "+s+") tilemap 'data' must be of type 'object'.")):console.log("AssetLoader:: tilemap 'url' must be of type 'string'.")):console.log("AssetLoader:: 'tilemap' json structure is malformed.");else console.log("AssetLoader:: 'tilemap' json structure is malformed.")}},{key:"loadVideo",value:function(o){var s=void 0,a=void 0,t=void 0,r=void 0,l=void 0;if(e.isHashMap(o))for(s in o)a=o[s],"string"==typeof a&&""!==a||Array.isArray(a)&&a.length>0?this.game.load.video(s,a):e.isHashMap(a)&&Object.keys(a).length>0?(t=a.hasOwnProperty("urls")?a.urls:null,null!==t?(r=a.hasOwnProperty("loadEvent")?a.loadEvent:"canplaythrough","canplaythrough"===r||"canplay"===r||"loadeddata"===r?(l=!!a.hasOwnProperty("asBlob")&&a.asBlob,"boolean"==typeof l?this.game.load.video(s,t,r,l):console.log("AssetLoader:: video 'asBlob' must be of type 'boolean'.")):console.log("AssetLoader:: video 'loadEvent' must be 'canplaythrough', 'canplay', or 'loadeddata'.")):console.log("AssetLoader:: video 'urls' must be defined.")):console.log("AssetLoader:: 'video' json structure is malformed.");else console.log("AssetLoader:: 'video' json structure is malformed.")}},{key:"loadXML",value:function(o){var s=void 0,a=void 0,t=void 0,r=void 0,l=void 0;if("string"==typeof o)this.game.load.xml(o);else if(Array.isArray(o))for(t=0;t<o.length;t++)"string"==typeof o[t]?this.game.load.xml(o[t]):console.log("AssetLoader:: xml keys must be of type 'string'.");else if(e.isHashMap(o))for(s in o)a=o[s],"string"==typeof a?this.game.load.xml(s,a):e.isHashMap(a)?(r=a.hasOwnProperty("url")?a.url:s+".xml","string"==typeof r?(l=!!a.hasOwnProperty("overwrite")&&a.overwrite,"boolean"==typeof l?this.game.load.xml(s,r,l):console.log("AssetLoader:: (key: "+s+") xml 'overwrite' must be of type 'boolean'.")):console.log("AssetLoader:: (key: "+s+") xml 'url' must be of type 'string'.")):console.log("AssetLoader:: 'xml' json structure is malformed.");else console.log("AssetLoader:: 'xml' json structure is malformed.")}}],[{key:"isHashMap",value:function(e){return"boolean"!=typeof e&&"number"!=typeof e&&"string"!=typeof e&&!Array.isArray(e)&&void 0!==e&&null!==e}}]),e}();o.default=r,e.exports=o.default}])});